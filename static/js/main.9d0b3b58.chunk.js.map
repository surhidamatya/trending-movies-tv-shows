{"version":3,"sources":["components/MovieTitle.js","components/TVShowTitle.js","projectConfiguration.js","utils/http.js","services/services.js","utils/utilityGenerator.js","utils/constants.js","components/ItemCard.js","utils/imageUrlGenerator.js","components/ItemColumn.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["MovieTitle","info","title","TVShowTitle","name","projectConfiguration","apiURL","imageURL","token","trendingUrl","REACT_APP_API_URL","genreUrl","http","axios","create","baseURL","headers","interceptors","request","use","config","accessToken","Authorization","getTrendingItems","mediaType","timeWindow","a","url","get","response","getGenres","getTmdbIds","tmdbId","findImdbId","id","media_type","externalId","imdbId","data","imdb_id","getImdbUrl","tmdbid","ItemCard","props","makeImdbUrl","state","imdbUrl","setState","makeYoutubeTrailer","mediaName","youtubeUrl","replace","this","HomePageContext","Consumer","genres","path","filteredGenreNames","filter","genreList","genre_ids","includes","map","className","href","target","rel","src","poster_path","alt","vote_average","genre","index","key","Component","ItemColumn","results","logo","height","result","React","createContext","Home","fetchMovies","console","log","fetchShows","storeGenres","movies","shows","isLoading","Promise","all","Provider","value","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9d0b3b58.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport {PropTypes} from 'prop-types';\r\n\r\nconst MovieTitle = ({info}) => (\r\n  <span>{info.title}</span>\r\n);\r\n\r\nMovieTitle.propTypes = {\r\n  info: PropTypes.shape({\r\n    title: PropTypes.string.isRequired\r\n  })\r\n}\r\nexport default MovieTitle;\r\n","import React from \"react\";\r\n\r\nimport {PropTypes} from 'prop-types';\r\n\r\nconst TVShowTitle = ({info}) => (\r\n  <span>{info.name}</span>\r\n);\r\n\r\nTVShowTitle.propTypes = {\r\n  info: PropTypes.shape({\r\n    name: PropTypes.string.isRequired\r\n  })\r\n}\r\n\r\nexport default TVShowTitle;\r\n","const trendingUrl = '/trending';\r\nconst posterSize = '/w800';\r\nconst genres = '/genre/movie/list';\r\n\r\nconst REACT_APP_API_URL='https://api.themoviedb.org/3';\r\nconst REACT_APP_IMG_URL= 'https://image.tmdb.org/t/p/original';\r\nconst REACT_APP_API_TOKEN='9626168d181bfa64fe2b0fa44150ce6b';\r\n\r\nexport const projectConfiguration = {\r\n  apiURL : REACT_APP_API_URL,\r\n  imageURL : REACT_APP_IMG_URL,\r\n  token : REACT_APP_API_TOKEN,\r\n  trendingUrl: REACT_APP_API_URL + trendingUrl,\r\n  genreUrl : REACT_APP_API_URL + genres\r\n}","import axios from 'axios';\r\n\r\nimport { projectConfiguration } from '../projectConfiguration';\r\n\r\nconst http = axios.create({\r\n  baseURL: projectConfiguration.apiURL,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n/**\r\n * HTTP call interceptor.\r\n */\r\nhttp.interceptors.request.use(config => {\r\n  const accessToken = projectConfiguration.token;\r\n\r\n  if (accessToken) {\r\n    config.headers.Authorization = `Bearer ${accessToken}`;\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\nexport default http;\r\n","import http from '../utils/http';\r\nimport { projectConfiguration } from '../projectConfiguration';\r\n\r\nexport async function getTrendingItems(mediaType, timeWindow) {\r\n\tconst url = `${projectConfiguration.trendingUrl}/${mediaType}/${timeWindow}?api_key=${projectConfiguration.token}`;\r\n\tconst response = await http.get(url);\r\n\r\n\treturn response;\r\n}\r\n\r\nexport async function getGenres() {\r\n  const url = `${projectConfiguration.genreUrl}?api_key=${projectConfiguration.token}`;\r\n  const response = await http.get(url);\r\n\r\n  return response;\r\n}\r\n\r\nexport async function getTmdbIds(tmdbId, mediaType) {\r\n  const url = `${projectConfiguration.apiURL}/${mediaType}/${tmdbId}/external_ids?api_key=${projectConfiguration.token}`;\r\n  const response = await http.get(url);\r\n\r\n  return response;\r\n}\r\n","import { getTmdbIds } from \"../services/services\";\r\nimport * as constant from \"../utils/constants\";\r\n\r\nexport async function findImdbId(id, media_type) {\r\n  const externalId = await getTmdbIds(id, media_type);\r\n  const imdbId = externalId.data.imdb_id;\r\n  \r\n  return imdbId;\r\n}\r\n\r\nexport async function getImdbUrl(tmdbid, mediaType) {\r\n  const imdbId = await findImdbId(tmdbid,mediaType);\r\n  const url = constant.TBDB_TITLE +imdbId;\r\n  \r\n  return url;\r\n}\r\n\r\nexport function youtubeSearchQueryGenerator(mediaName) {\r\n\treturn `https://www.youtube.com/results?search_query=${mediaName.replace(\r\n\t\t/ /g,\r\n\t\t'+'\r\n\t)}+720p+trailer`;\r\n}","export const TBDB_TITLE = \"https://imdb.com/title/\";\r\nexport const TIME_WINDOW = \"day\";\r\nexport const VIDEO_PIXEL = \"720p\";\r\nexport const POWERED_BY = \"https://www.themoviedb.org/assets/2/v4/logos/powered-by-square-green-11c0c7f8e03c4f44aa54d5e91d9531aa9860a9161c49f5fa741b730c5b21a1f2.svg\";\r\nexport const TV_SHOW = \"Trending TV Shows\";\r\nexport const TITLE_MOVIE = \"Trending Movies\";","import React, { Component } from 'react';\r\n\r\nimport MovieTitle from '../components/MovieTitle';\r\nimport TVShowTitle from '../components/TVShowTitle';\r\nimport { HomePageContext } from '../components/Home';\r\nimport { imageUrlGenerator } from '../utils/imageUrlGenerator';\r\nimport { getImdbUrl, youtubeSearchQueryGenerator } from '../utils/utilityGenerator';\r\n\r\nclass ItemCard extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tinfo: props.info,\r\n\t\t\timdbUrl: '',\r\n\t\t\tyoutubeUrl: ''\r\n\t\t};\r\n\t}\r\n\tmakeImdbUrl = async () => {\r\n\t\tconst imdbUrl = await getImdbUrl(\r\n\t\t\tthis.state.info.id,\r\n\t\t\tthis.state.info.media_type\r\n\t\t);\r\n\t\tthis.setState({\r\n\t\t\timdbUrl: imdbUrl\r\n\t\t});\r\n\t};\r\n\r\n\tmakeYoutubeTrailer = () => {\r\n\t\tconst youtubeUrl = youtubeSearchQueryGenerator(\r\n\t\t\tthis.state.info.title || this.state.info.name\r\n\t\t);\r\n\t\tthis.setState({\r\n\t\t\tyoutubeUrl: youtubeUrl\r\n\t\t});\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.makeImdbUrl();\r\n\t\tthis.makeYoutubeTrailer();\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<HomePageContext.Consumer>\r\n\t\t\t\t{genres => {\r\n\t\t\t\t\tconst filteredGenres = genres.filter(genreList =>\r\n\t\t\t\t\t\tthis.state.info.genre_ids.includes(genreList.id)\r\n\t\t\t\t\t);\r\n\t\t\t\t\tconst filteredGenreNames = filteredGenres.map(genres => genres.name);\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\thref={this.state.imdbUrl}\r\n\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\tsrc={imageUrlGenerator(this.state.info.poster_path)}\r\n\t\t\t\t\t\t\t\t\talt=\"shows of thumbnails\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"thumbnail\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t<div className=\"item-body\">\r\n\r\n\t\t\t\t\t\t\t<div className=\"item-title\">\r\n\t\t\t\t\t\t\t\t\t{this.state.info.media_type === 'movie' ? (\r\n\t\t\t\t\t\t\t\t\t\t<MovieTitle info={this.state.info} />\r\n\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<TVShowTitle info={this.state.info} />\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"vote\">\r\n\t\t\t\t\t\t\t\t\t{this.state.info.vote_average}\r\n\t\t\t\t\t\t\t\t\t<span className=\"out-of-10\">/10</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t{filteredGenreNames.map((genre, index) => (\r\n\t\t\t\t\t\t\t\t\t\t<li className=\"genre-list\" key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t{genre}\r\n\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"playing-on\">\r\n\t\t\t\t\t\t\t\t{this.state.info.media_type === 'tv' && (\r\n\t\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\thref={this.state.youtubeUrl}\r\n\t\t\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"out-of-10\">Playing on  </span>\r\n\t\t\t\t\t\t\t\t\t\t{this.state.info.vote_average}\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"watch-trailer\">\r\n\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\thref={this.state.youtubeUrl}\r\n\t\t\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tWatch Trailer\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t}}\r\n\t\t\t</HomePageContext.Consumer>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ItemCard;\r\n","import {projectConfiguration} from '../projectConfiguration';\r\n\r\nexport function imageUrlGenerator(path) {\r\n  const url = `${projectConfiguration.imageURL}/${path}`;\r\n  return url\r\n}\r\n","import React from 'react';\r\n\r\nimport ItemCard from './ItemCard';\r\nimport {PropTypes} from 'prop-types';\r\n\r\nconst ItemColumn = ({ results, title, logo }) => (\r\n    <div className=\"bar\">\r\n      {logo && <img src={logo} height=\"80px\" alt=\"main logo\" className=\"main-logo\"/>}\r\n      <h2 className=\"heading\">{title}</h2>\r\n      <div className=\"row\">\r\n        {results.map((result,index)=> {\r\n          return <ItemCard info={result} key={index}/>\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  ItemColumn.propTypes = {\r\n  results: PropTypes.array,\r\n  title: PropTypes.string\r\n}\r\nexport default ItemColumn;\r\n","import React, {Component} from 'react';\r\n\r\nimport ItemColumn from './ItemColumn';\r\nimport * as constant from \"../utils/constants\";\r\nimport {getTrendingItems, getGenres} from '../services/services';\r\n\r\nexport const HomePageContext = React.createContext();\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timeWindow: constant.TIME_WINDOW,\r\n      movies: [],\r\n      shows: [],\r\n      genres: [],\r\n      isLoading: true\r\n    }\r\n  }\r\n  fetchMovies = async() => {\r\n    try {\r\n      const { data } = await getTrendingItems('movie', this.state.timeWindow);\r\n      if (data && data.results) {\r\n        return data.results;\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  fetchShows = async() => {\r\n    try {\r\n      const { data } = await getTrendingItems('tv', this.state.timeWindow);\r\n      if (data && data.results) {\r\n        return data.results;\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n  storeGenres = async() => {\r\n    try {\r\n      const {data} = await getGenres();\r\n      if (data) {\r\n        return data.genres;\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try{\r\n    const [movies, shows, genres] = await Promise.all([\r\n      this.fetchMovies(),\r\n      this.fetchShows(),\r\n      this.storeGenres()\r\n    ]);\r\n    this.setState({movies: movies, shows: shows, genres: genres, isLoading: false});\r\n  }catch(error){\r\n    console.log(\"Home error\", error)\r\n  }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<HomePageContext.Provider value={this.state.genres}>\r\n\t\t\t\t\t{this.state.shows && (\r\n\t\t\t\t\t\t<ItemColumn results={this.state.shows} title={constant.TV_SHOW} logo= {constant.POWERED_BY}/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{this.state.movies && (\r\n\t\t\t\t\t\t<ItemColumn results={this.state.movies} title={constant.TITLE_MOVIE} />\r\n\t\t\t\t\t)}\r\n\t\t\t\t</HomePageContext.Provider>\r\n\t\t\t</div>\r\n\t\t);\r\n  }\r\n\r\n}\r\nexport default Home;\r\n","import React from 'react';\n\nimport './App.css';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <div className=\"container-wrap\">\n            <Home/>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'src/assets/css/style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}